#!/usr/bin/env python
from misc.utility.scons_hints import *
import os

Import("env")
Import("env_modules")


#region Helpers
def get_addon_target():
    if env["target"] == "template_release":
        return "template_release"
    return "template_debug"

def get_addon_platform():
    return env["platform"].replace("linuxbsd", "linux")

dev_build_extension = ""
if env["dev_build"]:
    dev_build_extension += ".dev"

def get_sufix():
    suffix = ".{}.{}".format(get_addon_platform(), get_addon_target())
    suffix += dev_build_extension
    if env["precision"] == "double":
        suffix += ".double"
    suffix += "." + env["arch"]
    if not env["threads"]:
        suffix += ".nothreads"
    return suffix

os.system("scons static_build=yes platform=" + get_addon_platform() + " target=" + get_addon_target() + " arch=" + env["arch"] + " precision=" + env["precision"] + " threads=" + str(env["threads"]) + " dev_build=" + str(env["dev_build"]))

platform = get_addon_platform()
target = get_addon_target()
arch = env["arch"]
#endregion

env_tiny_lobby = env_modules.Clone()


if env["platform"] == "ios":
    env.Append(LIBPATH=["#modules/tiny_lobby/bin", "#modules/tiny_lobby/godot-cpp/bin"])
    env.Append(LIBS=[
            f"tiny_lobby.{platform}.{target}{dev_build_extension}.{arch}",
            f"godot-cpp.{platform}.{target}{dev_build_extension}.{arch}"])
else:
    env.Append(LIBPATH=["#modules/tiny_lobby/bin", "#modules/tiny_lobby/godot-cpp/bin"])
    env.Append(LIBS=[
        f"tiny_lobby.{platform}.{target}{dev_build_extension}.{arch}",
        f"godot-cpp.{platform}.{target}{dev_build_extension}.{arch}"])

env.Append(LIBPATH=["#modules/tiny_lobby/bin"])
env.Append(LIBS=[f"tiny_lobby.{platform}.{target}{dev_build_extension}.{arch}"])

env.Append(LIBPATH=["#modules/tiny_lobby/godot-cpp/bin"])
env.Append(LIBS=[f"godot-cpp.{platform}.{target}{dev_build_extension}.{arch}"])


module_obj = []

env_tiny_lobby.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj
