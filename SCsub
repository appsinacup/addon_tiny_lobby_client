#!/usr/bin/env python
from misc.utility.scons_hints import *
import os

Import("env")
Import("env_modules")


#region Helpers
def get_addon_platform():
    return env["platform"].replace("linuxbsd", "linux")

def get_addon_threads():
    return "yes" if env["threads"] else "no"

def get_addon_llvm():
    return "yes" if env.get("use_llvm", False) else "no"

def get_addon_devbuild():
    return "yes" if env.get("dev_build", False) else "no"

def get_addon_target():
    return "template_release" if env["target"] == "editor" else env["target"]

def get_addon_mingw():
    return "yes" if env.get("use_mingw", False) else "no"

os.system(f"scons static_build=yes platform={get_addon_platform()} target={get_addon_target()} arch={env['arch']} precision={env['precision']} threads={get_addon_threads()} dev_build={get_addon_devbuild()} use_llvm={get_addon_llvm()} lto={env['lto']} use_mingw={get_addon_mingw()}")

# Wait 5 seconds for file system to sync (Windows CI/CD workaround)
time.sleep(5)

def get_sufix_before():
    suffix = f".{get_addon_platform()}.{env['target']}"
    if env["dev_build"]:
        suffix += ".dev"
    if env["precision"] == "double":
        suffix += ".double"
    suffix += f".{env['arch']}"
    if not env["threads"]:
        suffix += ".nothreads"
    if env.get("use_llvm", False):
        suffix += ".llvm"
    return suffix


def get_sufix_after():
    suffix = f".{get_addon_platform()}.{get_addon_target()}"
    if env["dev_build"]:
        suffix += ".dev"
    if env["precision"] == "double":
        suffix += ".double"
    suffix += f".{env['arch']}"
    if not env["threads"]:
        suffix += ".nothreads"
    return suffix
os.system("ls -l bin/")
# Rename if target is editor
if env["target"] == "editor" or env["platform"] == "windows":
    lib_extension = ".a" if env["platform"] != "windows" else ".lib"
    lib_prefix = "lib" if env["platform"] != "windows" else ""
    if env.get("use_mingw", False):
        lib_extension = ".a"
        lib_prefix = "lib"
    # If lib exists, remove it
    if os.path.exists(f"bin/{lib_prefix}tiny_lobby{get_sufix_before()}{lib_extension}"):
        os.remove(f"bin/{lib_prefix}tiny_lobby{get_sufix_before()}{lib_extension}")
    if os.path.exists(f"godot-cpp/bin/{lib_prefix}godot-cpp{get_sufix_before()}{lib_extension}"):
        os.remove(f"godot-cpp/bin/{lib_prefix}godot-cpp{get_sufix_before()}{lib_extension}")
    # Rename our lib
    os.rename(
        f"bin/libtiny_lobby{get_sufix_after()}{lib_extension}",
        f"bin/{lib_prefix}tiny_lobby{get_sufix_before()}{lib_extension}"
    )
    # Rename godot-cpp lib
    os.rename(
        f"godot-cpp/bin/libgodot-cpp{get_sufix_after()}{lib_extension}",
        f"godot-cpp/bin/{lib_prefix}godot-cpp{get_sufix_before()}{lib_extension}"
    )
        
# Do an ls on bin folder
os.system("ls -l bin/")
#endregion

env_tiny_lobby = env_modules.Clone()
suffix = get_sufix_before()
if env["platform"] == "ios":
    tiny_path = f"#modules/tiny_lobby/bin/libtiny_lobby{suffix}.a"
    godotcpp_path = f"#modules/tiny_lobby/godot-cpp/bin/libgodot-cpp{suffix}.a"
    env.Append(LIBS=[env.File(tiny_path), env.File(godotcpp_path)])
elif env["platform"] != "windows" or env.get("use_mingw", False):
    env.Append(LIBPATH=["#modules/tiny_lobby/bin", "#modules/tiny_lobby/godot-cpp/bin"])
    env.Append(LIBS=[f"tiny_lobby{suffix}", f"godot-cpp{suffix}"])
else:
    env.Append(LIBPATH=["#modules/tiny_lobby/bin", "#modules/tiny_lobby/godot-cpp/bin"])
    env.Append(LIBS=["tiny_lobby", "godot-cpp"])


env.add_source_files(env.modules_sources, "register_types.cpp")
