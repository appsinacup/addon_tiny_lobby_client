name: Build GDExtension
on:
  workflow_dispatch:
  push:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          
      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit (all files)
        run: pre-commit run --all-files

  build:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            { platform: linux, arch: x86_64, os: ubuntu-22.04 },
            { platform: linux, arch: x86_32, os: ubuntu-22.04 },
            { platform: linux, arch: arm64, os: ubuntu-22.04-arm },
            { platform: linux, arch: arm32, os: ubuntu-22.04-arm },
            { platform: windows, arch: x86_64, os: windows-latest },
            { platform: windows, arch: x86_32, os: windows-latest },
            { platform: windows, arch: arm64, os: windows-latest },
            { platform: macos, arch: universal, os: macos-latest },
            { platform: android, arch: x86_64, os: ubuntu-22.04 },
            { platform: android, arch: x86_32, os: ubuntu-22.04 },
            { platform: android, arch: arm64, os: ubuntu-22.04 },
            { platform: android, arch: arm32, os: ubuntu-22.04 },
            { platform: ios, arch: arm64, os: macos-latest },
            { platform: web, arch: wasm32, os: ubuntu-22.04 },
          ]
        target-type: [template_debug, template_release]
        float-precision: [single]

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      
      # Add linux x86_32 toolchain
      - name: Install multilib support
        if: ${{ matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32' }}
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib

      # Setup dependencies
      - name: Setup godot-cpp
        uses: ./godot-cpp/.github/actions/setup-godot-cpp
        with:
          platform: ${{ matrix.target.platform }}
          em-version: 3.1.62

      # Build GDExtension (with caches)

      - name: Restore .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-restore
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}

      - name: Build GDExtension Debug Build
        shell: sh
        env:
          SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
        run: |
          scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }}

      - name: Save .scons_cache
        uses: ./godot-cpp/.github/actions/godot-cache-save
        with:
          scons-cache: ${{ github.workspace }}/.scons-cache/
          cache-name: ${{ matrix.target.platform }}_${{ matrix.target.arch }}_${{ matrix.float-precision }}_${{ matrix.target-type }}

      # Clean up compilation files
      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item bin/* -Include *.exp,*.lib,*.pdb -Force

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile for macOS
        shell: bash
        if: matrix.target.platform == 'macos' && env.BUILD_CERTIFICATE_BASE64 != '' && github.ref == 'refs/heads/main'
        env:
          # Developer ID Certificate
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          SIGNING_IDENTITY=$(security find-identity -p codesigning -v | awk -F'"' 'NR==1 {print $2}')
          echo "APPLE_SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV

      - name: Sign for macos
        if: matrix.target.platform == 'macos' && env.BUILD_CERTIFICATE_BASE64 != ''
        env:
          # Developer ID Certificate
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          FRAMEWORK_PATH: bin/addons/tiny_lobby/libtiny_lobby.macos.${{ matrix.target-type }}.universal.framework
        shell: bash
        run: |
          # Remove wrong attributes
          # xattr -cr $FRAMEWORK_PATH

          # Set permissions and sign the application
          chmod +x $FRAMEWORK_PATH
          
          codesign --deep --force --options=runtime --verbose --timestamp \
             --sign "${{ env.APPLE_SIGNING_IDENTITY }}" \
            $FRAMEWORK_PATH
          codesign --verify --strict --deep --verbose $FRAMEWORK_PATH
          # Package the application into a zip file
          ditto -c -k --keepParent $FRAMEWORK_PATH File.zip

          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool store-credentials "AppleID" \
          --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}"
          /Applications/Xcode.app/Contents/Developer/usr/bin/notarytool submit File.zip --wait --keychain-profile "AppleID"

          xcrun stapler staple $FRAMEWORK_PATH
          rm File.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GDExtension-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}
          path: |
            ${{ github.workspace }}/bin/**
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout 
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: GDExtension-*
          path: bin
          merge-multiple: true
      - name: Delete draft release(s)
        uses: hugo19941994/delete-draft-releases@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive
        shell: sh
        run: zip -r "GDExtension.zip" bin
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Tiny Client
          files: GDExtension.zip
          generate_release_notes: true
          draft: true
          prerelease: true
          fail_on_unmatched_files: true
