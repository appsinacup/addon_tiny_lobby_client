<?xml version="1.0" encoding="UTF-8" ?>
<class name="LoginClient" inherits="NetworkClient" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Node for connecting to the Blazium Login service. Offers authentication mechanism.
	</brief_description>
	<description>
		The [LoginClient] node provides an interface for connecting to the Blazium Login service. There is a free instance hosted on the [url=https://blazium.app]blazium.app[/url] domain that is used by default.
		The authentication flow is as follows:
		1. Listen to all the signals you are interested in.
		2. Connect to the server using the [method connect_to_server] method.
		3. Then you can request login info using the [method request_login_info] method.
		4. Open the resulting login url received after awaiting on the [signal LoginURLResponse.finished] signal.
		5. Obtain the jwt from the [signal received_jwt] signal.
		[b]Note:[/b] Some methods are non blocking and can be awaited in order to get the result.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="connect_to_server">
			<return type="LoginConnectResponse" />
			<description>
				Connects to the server specified in [member server_url] using the game id specified in [member game_id]. Must be done before requesting login info.
				Generates [signal connected_to_server] when connected.
				Returns a [LoginConnectResponse] object that has a [signal LoginConnectResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="disconnect_from_server">
			<return type="void" />
			<description>
				Disconnect from the server.
				Needs [method connect_to_server] to be called first.
				Generates [signal disconnected_from_server] when disconnected.
			</description>
		</method>
		<method name="request_auth">
			<return type="LoginAuthResponse" />
			<param index="0" name="login_type" type="String" />
			<param index="1" name="auth_id" type="String" />
			<param index="2" name="code" type="String" />
			<description>
				Request login auth jwt using the login type specified, auth_id and access code.
				Needs [method connect_to_server] to be called first.
				Returns a [LoginAuthResponse] object that has a [signal LoginAuthResponse.finished] signal that is emitted when finished.
				Generates [signal received_jwt] when a jwt is received.
			</description>
		</method>
		<method name="request_auth_id">
			<return type="LoginIDResponse" />
			<param index="0" name="login_type" type="String" />
			<description>
				Request login auth id using the login type specified.
				Needs [method connect_to_server] to be called first.
				Returns a [LoginIDResponse] object that has a [signal LoginIDResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="request_login_info">
			<return type="LoginURLResponse" />
			<param index="0" name="login_type" type="String" />
			<description>
				Request login info using the login type specified.
				Needs [method connect_to_server] to be called first.
				Returns a [LoginURLResponse] object that has a [signal LoginURLResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="request_steam_auth">
			<return type="LoginAuthResponse" />
			<param index="0" name="auth_id" type="String" />
			<param index="1" name="steam_ticket" type="String" />
			<description>
				Request login auth jwt using the auth_id and steam_ticket.
				Needs [method connect_to_server] to be called first.
				Returns a [LoginAuthResponse] object that has a [signal LoginAuthResponse.finished] signal that is emitted when finished.
				Generates [signal received_jwt] when a jwt is received.
			</description>
		</method>
		<method name="verify_jwt_token">
			<return type="LoginVerifyTokenResponse" />
			<param index="0" name="jwt_token" type="String" />
			<description>
				Verify the jwt token is still valid.
				Needs [method connect_to_server] to be called first.
				Returns a [LoginVerifyTokenResponse] object that has a [signal LoginVerifyTokenResponse.finished] signal that is emitted when finished.
			</description>
		</method>
	</methods>
	<members>
		<member name="connected" type="bool" setter="" getter="get_connected" default="false">
			Client connected state.
		</member>
		<member name="discord_embedded_app/path" type="String" setter="set_override_discord_path" getter="get_override_discord_path" default="&quot;appsinacup/login&quot;">
			Set to what path this client should use when connecting to the discord embedded app.
		</member>
		<member name="game_id" type="String" setter="set_game_id" getter="get_game_id" default="&quot;&quot;">
			Set what game id this client should use when connecting to the server. If this is missing connection will error.
			Can only contain alphanumeric characters.
		</member>
		<member name="http_prefix" type="String" setter="set_http_prefix" getter="get_http_prefix" default="&quot;https://&quot;">
			The http prefix that will be added to the url. If you want to use http instead of https, set it there.
		</member>
		<member name="server_url" type="String" setter="set_server_url" getter="get_server_url" default="&quot;login.appsinacup.com&quot;">
			Set to what url this client should connect to.
			For discord embedded app environment, replaces the url with [url=wss://client_id.discordsays.com/.proxy/blazium/login/connect]client_id.discordsays.com/.proxy/blazium/login/connect[/url] if left default, where client_id is the client id from the discord embedded app url (automatically detected).
		</member>
		<member name="websocket_prefix" type="String" setter="set_websocket_prefix" getter="get_websocket_prefix" default="&quot;wss://&quot;">
			The http prefix that will be added to the url. If you want to use ws instead of wss, set it there.
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
				Signal emitted when the client connects to the server.
			</description>
		</signal>
		<signal name="disconnected_from_server">
			<param index="0" name="reason" type="String" />
			<description>
				Signal emitted when the client disconnects from the server.
			</description>
		</signal>
		<signal name="log_updated">
			<param index="0" name="command" type="String" />
			<param index="1" name="logs" type="String" />
			<description>
				Signals a log from a command.
			</description>
		</signal>
		<signal name="received_jwt">
			<param index="0" name="jwt" type="String" />
			<param index="1" name="type" type="String" />
			<param index="2" name="access_token" type="String" />
			<description>
				Signal emitted when a JWT is received.
			</description>
		</signal>
	</signals>
</class>
