<?xml version="1.0" encoding="UTF-8" ?>
<class name="DiscordEmbeddedAppClient" inherits="ThirdPartyClient" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Node for connecting to the Discord Embedded App service.
	</brief_description>
	<description>
		Implementation based on the official Discord Embedded App SDK for JS. Official documentation for this service on [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk]discord.com/developers/docs/developer-tools/embedded-app-sdk[/url].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="authenticate">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="access_token" type="String" />
			<description>
				Authenticate an existing client with your app. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#authenticate]discord.com/developers/docs/developer-tools/embedded-app-sdk#authenticate[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await authenticate("ACCESS_TOKEN").finished
				if res.has_error():
				    print(res.error)
				else:
					print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="authorize">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="response_type" type="String" />
			<param index="1" name="state" type="String" />
			<param index="2" name="prompt" type="String" />
			<param index="3" name="scope" type="Array" />
			<description>
				Authorize a new client with your app. Needs [member client_id] to be set.
				Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#authorize]discord.com/developers/docs/developer-tools/embedded-app-sdk#authorize[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await authorize("code", "", "none", ["identity", "guilds"]).finished
				if res.has_error():
				    print(res.error)
				else:
					print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="capture_log">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="level" type="String" />
			<param index="1" name="message" type="String" />
			<description>
				Forward logs to your own logger. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#capturelog]discord.com/developers/docs/developer-tools/embedded-app-sdk#capturelog[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await capture_log("log", "This is my log message!").finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="close">
			<return type="void" />
			<param index="0" name="code" type="int" />
			<param index="1" name="message" type="String" />
			<description>
				Close an Embedded App. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#close]discord.com/developers/docs/developer-tools/embedded-app-sdk#close[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await close(1000, "You exited app.").finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="encourage_hardware_acceleration">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Presents a modal dialog to allow enabling of hardware acceleration. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#encouragehardwareacceleration]discord.com/developers/docs/developer-tools/embedded-app-sdk#encouragehardwareacceleration[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await encourage_hardware_acceleration().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_channel">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="channel_id" type="String" />
			<description>
				Returns information about the channel, per the channel_id. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getchannel]discord.com/developers/docs/developer-tools/embedded-app-sdk#getchannel[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_channel("channel_id").finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_channel_permissions">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns permissions for the current user in the currently connected channel. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getchannelpermissions]discord.com/developers/docs/developer-tools/embedded-app-sdk#getchannelpermissions[/url]
				[codeblocks]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_channel_permissions().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_entitlements">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns a list of entitlements for the current user. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getentitlements]discord.com/developers/docs/developer-tools/embedded-app-sdk#getentitlements[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_entitlements().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_instance_connected_participants">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns all participants connected to the instance. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getinstanceconnectedparticipants]discord.com/developers/docs/developer-tools/embedded-app-sdk#getinstanceconnectedparticipants[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_instance_connected_participants().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_platform_behaviours">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns information about supported platform behaviors. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getplatformbehaviors]discord.com/developers/docs/developer-tools/embedded-app-sdk#getplatformbehaviors[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_platform_behaviours().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="get_skus">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns a list of your app's SKUs. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#getskus]discord.com/developers/docs/developer-tools/embedded-app-sdk#getskus[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await get_skus().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="initiate_image_upload">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Presents the file upload flow in the Discord client. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#initiateimageupload]discord.com/developers/docs/developer-tools/embedded-app-sdk#initiateimageupload[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await initiate_image_upload().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="is_discord_environment">
			<return type="bool" />
			<description>
				Returns whether or not the current environment is Discord environment.
				[codeblocks]
				[gdscript]
				if is_discord_environment():
				    print("This is discord environment")
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="is_ready">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns whether or not the client is ready.
				Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#ready]discord.com/developers/docs/developer-tools/embedded-app-sdk#ready[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await is_ready().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="open_external_link">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="url" type="String" />
			<description>
				Allows for opening an external link from within the Discord client. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#openexternallink]discord.com/developers/docs/developer-tools/embedded-app-sdk#openexternallink[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await open_external_link("url").finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="open_invite_dialog">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Presents a modal dialog with Channel Invite UI without requiring additional OAuth scopes. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#openinvitedialog]discord.com/developers/docs/developer-tools/embedded-app-sdk#openinvitedialog[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await open_invite_dialog().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="open_share_moment_dialog">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="media_url" type="String" />
			<description>
				Presents a modal dialog to share media to a channel or DM. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#opensharemomentdialog]discord.com/developers/docs/developer-tools/embedded-app-sdk#opensharemomentdialog[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await open_share_moment_dialog().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="set_activity">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="activity" type="Dictionary" />
			<description>
				Modifies how your activity's rich presence is displayed in the Discord client. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#setactivity]discord.com/developers/docs/developer-tools/embedded-app-sdk#setactivity[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await set_activity({"type": 0, "details": "Details", "state": "Playing"}).finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="set_config">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="use_interactive_pip" type="bool" />
			<description>
				Set whether or not the PIP (picture-in-picture) is interactive. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#setconfig]discord.com/developers/docs/developer-tools/embedded-app-sdk#setconfig[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await set_config(true).finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="set_orientation_lock_state">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="lock_state" type="int" enum="DiscordEmbeddedAppClient.DiscordEmbeddedAppOrientationLockState" />
			<param index="1" name="picture_in_picture_lock_state" type="int" enum="DiscordEmbeddedAppClient.DiscordEmbeddedAppOrientationLockState" />
			<param index="2" name="grid_lock_state" type="int" enum="DiscordEmbeddedAppClient.DiscordEmbeddedAppOrientationLockState" />
			<description>
				Set options for orientation and picture-in-picture (PIP) modes. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#setorientationlockstate]discord.com/developers/docs/developer-tools/embedded-app-sdk#setorientationlockstate[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await set_orientation_lock_state(DiscordEmbeddedAppClient.DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_UNLOCKED, DiscordEmbeddedAppClient.DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_UNLOCKED, DiscordEmbeddedAppClient.DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_UNLOCKED).finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="start_purchase">
			<return type="DiscordEmbeddedAppResponse" />
			<param index="0" name="sku_id" type="String" />
			<param index="1" name="pid" type="String" />
			<description>
				Launches the purchase flow for a specific SKU, per the sku_id. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#startpurchase]discord.com/developers/docs/developer-tools/embedded-app-sdk#startpurchase[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await start_purchase("sku_id", "pid").finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
		<method name="subscribe_to_all_events">
			<return type="void" />
			<description>
				Subscribes to all events. Needs to be done after [method authenticate]. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				[codeblocks]
				[gdscript]
				subscribe_to_all_events()
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="user_settings_get_locale">
			<return type="DiscordEmbeddedAppResponse" />
			<description>
				Returns the current user's locale. Wait for [method DiscordEmbeddedAppClient.is_ready] first.
				Discord docs [url=Discord docs [url=https://discord.com/developers/docs/developer-tools/embedded-app-sdk#usersettingsgetlocale]discord.com/developers/docs/developer-tools/embedded-app-sdk#usersettingsgetlocale[/url]
				[codeblocks]
				[gdscript]
				var res :DiscordEmbeddedAppResult = await user_settings_get_locale().finished
				if res.has_error():
				    print(res.error)
				else:
				    print(res.data)
				[/gdscript]
				[/codeblocks]
				Returns a [DiscordEmbeddedAppResponse] object that has a [signal DiscordEmbeddedAppResponse.finished] signal that is emitted when finished.
			</description>
		</method>
	</methods>
	<members>
		<member name="channel_id" type="String" setter="" getter="get_channel_id" default="&quot;&quot;">
			The id of a channel. A channel represents a guild or DM channel within Discord.
		</member>
		<member name="client_id" type="String" setter="" getter="get_client_id" default="&quot;&quot;">
			The client id you want to use when starting the client.
		</member>
		<member name="custom_id" type="String" setter="" getter="get_custom_id" default="&quot;&quot;">
			Custom ID.
		</member>
		<member name="frame_id" type="String" setter="" getter="get_frame_id" default="&quot;&quot;">
			Frame ID.
		</member>
		<member name="guild_id" type="String" setter="" getter="get_guild_id" default="&quot;&quot;">
			Guilds in Discord represent an isolated collection of users and channels, and are often referred to as "servers" in the UI.
		</member>
		<member name="location_id" type="String" setter="" getter="get_location_id" default="&quot;&quot;">
			Location ID.
		</member>
		<member name="mobile_app_version" type="String" setter="" getter="get_mobile_app_version" default="&quot;&quot;">
			Only if on mobile.
		</member>
		<member name="platform" type="String" setter="" getter="get_platform" default="&quot;&quot;">
			The platform, web, ios or android.
		</member>
		<member name="referrer_id" type="String" setter="" getter="get_referrer_id" default="&quot;&quot;">
			The id of the referrer.
		</member>
		<member name="sdk_version" type="String" setter="" getter="get_sdk_version" default="&quot;1.9.0&quot;">
			The version of the Discord Embedded App used.
		</member>
		<member name="user_id" type="String" setter="" getter="get_user_id" default="&quot;&quot;">
			User ID.
		</member>
		<member name="user_instance_id" type="String" setter="" getter="get_user_instance_id" default="&quot;&quot;">
			Instance ID.
		</member>
	</members>
	<signals>
		<signal name="activity_instance_participants_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when the number of instance participants changes.
			</description>
		</signal>
		<signal name="activity_layout_mode_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when a user changes the layout mode in the Discord client.
			</description>
		</signal>
		<signal name="current_guild_member_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when the current guild member object changes.
			</description>
		</signal>
		<signal name="current_user_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when the current user object changes.
			</description>
		</signal>
		<signal name="entitlement_create">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when an entitlement is created for a SKU.
			</description>
		</signal>
		<signal name="error">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Non-subscription event sent when there is an error, including command responses.
			</description>
		</signal>
		<signal name="log_updated">
			<param index="0" name="command" type="String" />
			<param index="1" name="logs" type="String" />
			<description>
				Received when logs are updated.
			</description>
		</signal>
		<signal name="orientation_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when screen orientation changes.
			</description>
		</signal>
		<signal name="speaking_start">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Sent when a user in a subscribed voice channel speaks.
			</description>
		</signal>
		<signal name="speaking_stop">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Sent when a user in a subscribed voice channel stops speaking.
			</description>
		</signal>
		<signal name="thermal_state_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Received when Android or iOS thermal states are surfaced to the Discord app.
			</description>
		</signal>
		<signal name="voice_state_update">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Sent when a user's voice state changes in a subscribed voice channel (mute, volume, etc.).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_UNHANDLED" value="-1" enum="DiscordEmbeddedAppOrientationLockState">
			Unhandled orientation lock state.
		</constant>
		<constant name="DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_UNLOCKED" value="1" enum="DiscordEmbeddedAppOrientationLockState">
			Unlocked orientation lock state.
		</constant>
		<constant name="DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_PORTRAIT" value="2" enum="DiscordEmbeddedAppOrientationLockState">
			Locked portrait orientation lock state.
		</constant>
		<constant name="DISCORD_EMBEDDED_APP_ORIENTATION_LOCK_STATE_LANDSCAPE" value="3" enum="DiscordEmbeddedAppOrientationLockState">
			Locked landscape orientation lock state.
		</constant>
	</constants>
</class>
