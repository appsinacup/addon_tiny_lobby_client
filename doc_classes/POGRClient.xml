<?xml version="1.0" encoding="UTF-8" ?>
<class name="POGRClient" inherits="BlaziumClient" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Node for connecting to the POGR analytics service.
	</brief_description>
	<description>
		The [POGRClient] node provides an interface for connecting to the POGR analytics service. Find out more on the [url=https://pogr.gg]pogr.gg[/url] website.
		The normal flow is as follows:
		1. Initiate a session using [method init] method.
		2. Send data using [method data], [method event], [method logs], [method metrics] and [method monitor] methods, depending on use case.
		3. Close the session using [method end] method at the end of the game.
		[b]Note:[/b] All methods are non blocking and can be awaited in order to get the result.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="data">
			<return type="POGRResponse" />
			<param index="0" name="data" type="Dictionary" />
			<description>
				Send unstructured data. Call [method init] first.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await data({"custom_data": "my_data"}).finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="end">
			<return type="POGRResponse" />
			<description>
				Send end request. Call [method init] first.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await end().finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="event">
			<return type="POGRResponse" />
			<param index="0" name="event_name" type="String" />
			<param index="1" name="sub_event" type="String" />
			<param index="2" name="event_key" type="String" />
			<param index="3" name="flag" type="String" />
			<param index="4" name="type" type="String" default="&quot;user-event&quot;" />
			<param index="5" name="tags" type="Dictionary" default="{}" />
			<param index="6" name="data" type="Dictionary" default="{}" />
			<description>
				Send event with unstructured data. Call [method init] first.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await event("combat", "enemy_killed", "attack", "completed", "user-event").finished
				if res.has_error():
					print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="get_pogr_url" qualifiers="const">
			<return type="String" />
			<description>
				Get the pogr url.
			</description>
		</method>
		<method name="get_session_id">
			<return type="String" />
			<description>
				Get the session id. This is a unique identifier for the current session generated after [method init] is called.
			</description>
		</method>
		<method name="init">
			<return type="POGRResponse" />
			<description>
				Send init request. Needs to be called first. Needs to have set before [member client_id] and [member build_id].
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await init().finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="logs">
			<return type="POGRResponse" />
			<param index="0" name="log" type="String" />
			<param index="1" name="severity" type="String" default="&quot;info&quot;" />
			<param index="2" name="environment" type="String" default="&quot;dev&quot;" />
			<param index="3" name="service" type="String" default="&quot;gameclient&quot;" />
			<param index="4" name="type" type="String" default="&quot;user-event&quot;" />
			<param index="5" name="tags" type="Dictionary" default="{}" />
			<param index="6" name="data" type="Dictionary" default="{}" />
			<description>
				Add logs to the analytics. Call [method init] first.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await logs("logs 123").finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="metrics">
			<return type="POGRResponse" />
			<param index="0" name="metrics" type="Dictionary" />
			<param index="1" name="environment" type="String" default="&quot;dev&quot;" />
			<param index="2" name="service" type="String" default="&quot;gameclient&quot;" />
			<param index="3" name="tags" type="Dictionary" default="{}" />
			<description>
				Add metrics to the analytics. Call [method init] first.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await metrics({"FPS": Engine.get_frames_per_second()}).finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="monitor">
			<return type="POGRResponse" />
			<param index="0" name="settings" type="Dictionary" />
			<description>
				Send monitor request.
				Returns a [POGRResponse] object that has a [signal POGRResponse.finished] signal that is emitted when finished.

				[codeblocks]
				[gdscript]
				var res :POGRResult = await monitor({"my_setting": "test"}).finished
				if res.has_error():
				    print(res.error)
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
	</methods>
	<members>
		<member name="build_id" type="String" setter="set_build_id" getter="get_build_id" default="&quot;&quot;">
		</member>
		<member name="client_id" type="String" setter="set_client_id" getter="get_client_id" default="&quot;&quot;">
		</member>
	</members>
	<signals>
		<signal name="log_updated">
			<param index="0" name="command" type="String" />
			<param index="1" name="logs" type="String" />
			<description>
				Signals a log from a command.
			</description>
		</signal>
	</signals>
</class>
