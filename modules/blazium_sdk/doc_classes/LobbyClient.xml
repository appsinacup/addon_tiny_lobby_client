<?xml version="1.0" encoding="UTF-8" ?>
<class name="LobbyClient" inherits="BlaziumClient" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A node used to connect to a lobby server.
	</brief_description>
	<description>
		A node used to connect to a lobby server. It can be used to do matchmaking. You can do operations such as create lobby, join lobby, etc. The server is configurable and can either be self deployed or you can use the blazium free matchmaking server.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_lobby_data">
			<return type="LobbyResponse" />
			<param index="0" name="data" type="Dictionary" />
			<param index="1" name="is_private" type="bool" default="false" />
			<description>
				Add data to the lobby. Only works if you are host.
				Generates [signal received_lobby_data].
			</description>
		</method>
		<method name="add_lobby_tags">
			<return type="LobbyResponse" />
			<param index="0" name="tags" type="Dictionary" />
			<description>
				Add tags to the lobby. Only works if you are host.
				Generates [signal lobby_tagged].
			</description>
		</method>
		<method name="add_peer_data">
			<return type="LobbyResponse" />
			<param index="0" name="data" type="Dictionary" />
			<param index="1" name="target_peer" type="String" />
			<param index="2" name="is_private" type="bool" default="false" />
			<description>
				Add data to a peer. Only works if you are host.
				Generates [signal received_peer_data].
			</description>
		</method>
		<method name="add_peers_data">
			<return type="LobbyResponse" />
			<param index="0" name="data" type="Dictionary" />
			<param index="1" name="is_private" type="bool" default="false" />
			<description>
				Add data to all peers. Only works if you are host.
				Generates [signal received_peer_data].
			</description>
		</method>
		<method name="connect_to_lobby">
			<return type="bool" />
			<description>
				Connect to a Blazium Lobby Server using the [member game_id] and [member server_url].
			</description>
		</method>
		<method name="create_lobby">
			<return type="ViewLobbyResponse" />
			<param index="0" name="title" type="String" />
			<param index="1" name="tags" type="Dictionary" default="{}" />
			<param index="2" name="max_players" type="int" default="4" />
			<param index="3" name="password" type="String" default="&quot;&quot;" />
			<description>
				Create a lobby and become host. If you are already in a lobby, you cannot create one. You need to leave first.
				The new lobby can have a title, tags, max players and password. 0 max players means unlimited.
				Generates [signal lobby_created] signal.
			</description>
		</method>
		<method name="del_lobby_data">
			<return type="LobbyResponse" />
			<param index="0" name="keys" type="String[]" />
			<param index="1" name="is_private" type="bool" default="false" />
			<description>
				Delete one or more keys from the lobby data. Only works if you are host.
				Generates [signal received_lobby_data].
			</description>
		</method>
		<method name="del_lobby_tags">
			<return type="LobbyResponse" />
			<param index="0" name="keys" type="String[]" />
			<description>
				Delete one or more keys from the lobby tags. Only works if you are host.
				Generates [signal lobby_tagged].
			</description>
		</method>
		<method name="del_peer_data">
			<return type="LobbyResponse" />
			<param index="0" name="keys" type="String[]" />
			<param index="1" name="target_peer" type="String" />
			<param index="2" name="is_private" type="bool" default="false" />
			<description>
				one or more keys from the peer data. Only works if you are host.
				Generates [signal received_peer_data].
			</description>
		</method>
		<method name="del_peers_data">
			<return type="LobbyResponse" />
			<param index="0" name="keys" type="String[]" />
			<param index="1" name="is_private" type="bool" default="false" />
			<description>
				one or more keys from the peers data. Only works if you are host.
				Generates [signal received_peer_data].
			</description>
		</method>
		<method name="disconnect_from_lobby">
			<return type="void" />
			<description>
				Disconnect from the lobby server.
			</description>
		</method>
		<method name="is_host">
			<return type="bool" />
			<description>
				Returns true if you are the host of the current lobby.
			</description>
		</method>
		<method name="join_lobby">
			<return type="ViewLobbyResponse" />
			<param index="0" name="lobby_id" type="String" />
			<param index="1" name="password" type="String" default="&quot;&quot;" />
			<description>
				Join a lobby. If you are already in a lobby, you cannot join another one. You need to leave first.
				If the lobby you want to join is password protected, you need to provide the password.
				Generates [signal lobby_joined].
			</description>
		</method>
		<method name="kick_peer">
			<return type="LobbyResponse" />
			<param index="0" name="peer_id" type="String" />
			<description>
				Kick a peer. You need to be host to do so.
				Generates [signal peer_left] signal with kicked set to true.
			</description>
		</method>
		<method name="leave_lobby">
			<return type="LobbyResponse" />
			<description>
				Leave a lobby. You need to be in a lobby to leave one.
				Generates [signal lobby_left].
			</description>
		</method>
		<method name="list_lobbies">
			<return type="ListLobbyResponse" />
			<param index="0" name="tags" type="Dictionary" default="{}" />
			<param index="1" name="start" type="int" default="0" />
			<param index="2" name="count" type="int" default="10" />
			<description>
				Lists all lobbies. Lobbies that are sealed won't show in the list, except if you disconnected and trying to reconnect to a lobby.
			</description>
		</method>
		<method name="notify_lobby">
			<return type="LobbyResponse" />
			<param index="0" name="data" type="Variant" />
			<description>
				Send a notification either to the host, or if you are host send data to all peers.
				Generates [signal lobby_notified] signal.
			</description>
		</method>
		<method name="notify_peer">
			<return type="LobbyResponse" />
			<param index="0" name="data" type="Variant" />
			<param index="1" name="target_peer" type="String" />
			<description>
				Send a notification to a peer, works only if you are host.
				Generates [signal lobby_notified] signal.
			</description>
		</method>
		<method name="send_chat_message">
			<return type="LobbyResponse" />
			<param index="0" name="chat_message" type="String" />
			<description>
				Send a chat message. Only works if you are in a lobby.
				Generates [signal peer_messaged].
			</description>
		</method>
		<method name="set_lobby_ready">
			<return type="LobbyResponse" />
			<param index="0" name="ready" type="bool" />
			<description>
				Ready up in the lobby. You need to be in a lobby and unready to run this.
				Generates [signal peer_ready].
			</description>
		</method>
		<method name="set_lobby_sealed">
			<return type="LobbyResponse" />
			<param index="0" name="seal" type="bool" />
			<description>
				Seals the lobby. You need to be the host to do this and the lobby needs to be unsealed.
				Generates [signal lobby_sealed].
			</description>
		</method>
		<method name="set_peer_name">
			<return type="LobbyResponse" />
			<param index="0" name="peer_name" type="String" />
			<description>
				Set your peer name.
				Generates [signal peer_named] signal if you are in lobby.
			</description>
		</method>
		<method name="view_lobby">
			<return type="ViewLobbyResponse" />
			<param index="0" name="lobby_id" type="String" default="&quot;&quot;" />
			<param index="1" name="password" type="String" default="&quot;&quot;" />
			<description>
				View data from a lobby. Returns lobby settings and peers.
			</description>
		</method>
	</methods>
	<members>
		<member name="connected" type="bool" setter="" getter="get_connected" default="false">
			True if the client is connected, else false.
		</member>
		<member name="game_id" type="String" setter="set_game_id" getter="get_game_id" default="&quot;&quot;">
			The game id.
		</member>
		<member name="host_data" type="Dictionary" setter="" getter="get_host_data" default="{}">
			The current lobby private data. Only works if you are host.
		</member>
		<member name="lobby" type="LobbyInfo" setter="" getter="get_lobby">
			The current lobby. Reflects changes to the lobby.
		</member>
		<member name="peer" type="LobbyPeer" setter="" getter="get_peer">
			The current peer. Reflects changes to the self peer.
		</member>
		<member name="peer_data" type="Dictionary" setter="" getter="get_peer_data" default="{}">
			The current peer private data.
		</member>
		<member name="peers" type="LobbyPeer[]" setter="" getter="get_peers" default="[]">
			The lobby peers. Reflects changes to all peers.
		</member>
		<member name="reconnection_token" type="String" setter="set_reconnection_token" getter="get_reconnection_token" default="&quot;&quot;">
			Reconnection token.
		</member>
		<member name="server_url" type="String" setter="set_server_url" getter="get_server_url" default="&quot;wss://lobby.blazium.app/connect&quot;">
			Set to what url this lobby should connect to.
		</member>
	</members>
	<signals>
		<signal name="connected_to_lobby">
			<param index="0" name="peer" type="LobbyPeer" />
			<param index="1" name="reconnection_token" type="String" />
			<description>
				Signal generated after you connect to the lobby.
			</description>
		</signal>
		<signal name="disconnected_from_lobby">
			<param index="0" name="reason" type="String" />
			<description>
				Signal generated after you disconnect from the lobby.
			</description>
		</signal>
		<signal name="lobby_created">
			<param index="0" name="lobby" type="LobbyInfo" />
			<param index="1" name="peers" type="LobbyPeer[]" />
			<description>
				Signal generated after a lobby is created.
			</description>
		</signal>
		<signal name="lobby_joined">
			<param index="0" name="lobby" type="LobbyInfo" />
			<param index="1" name="peers" type="LobbyPeer[]" />
			<description>
				Signal generated after you joint a lobby.
			</description>
		</signal>
		<signal name="lobby_left">
			<param index="0" name="kicked" type="bool" />
			<description>
				Signal generated after you leave a lobby.
			</description>
		</signal>
		<signal name="lobby_notified">
			<param index="0" name="data" type="Object" />
			<param index="1" name="from_peer" type="LobbyPeer" />
			<description>
				Signal generated after a notification is received.
			</description>
		</signal>
		<signal name="lobby_sealed">
			<param index="0" name="sealed" type="bool" />
			<description>
				Signal generated after the host seals the lobby.
			</description>
		</signal>
		<signal name="lobby_tagged">
			<param index="0" name="tags" type="Dictionary" />
			<description>
				Signal generated after the host updated the tags of the lobby
			</description>
		</signal>
		<signal name="log_updated">
			<param index="0" name="command" type="String" />
			<param index="1" name="logs" type="String" />
			<description>
				Signals a log from a command.
			</description>
		</signal>
		<signal name="peer_disconnected">
			<param index="0" name="peer" type="LobbyPeer" />
			<description>
				Signal generated after a peer disconnects. If they don't reconnect they will be removed.
			</description>
		</signal>
		<signal name="peer_joined">
			<param index="0" name="peer" type="LobbyPeer" />
			<description>
				Signal generated after a peer joins the lobby.
			</description>
		</signal>
		<signal name="peer_left">
			<param index="0" name="peer" type="LobbyPeer" />
			<param index="1" name="kicked" type="bool" />
			<description>
				Signal generated after a peer leaves the lobby.
			</description>
		</signal>
		<signal name="peer_messaged">
			<param index="0" name="peer" type="LobbyPeer" />
			<param index="1" name="chat_message" type="String" />
			<description>
				Signal generated after a peer sends a chat message.
			</description>
		</signal>
		<signal name="peer_named">
			<param index="0" name="peer" type="LobbyPeer" />
			<description>
				Signal generated after a peer names himself.
			</description>
		</signal>
		<signal name="peer_ready">
			<param index="0" name="peer" type="LobbyPeer" />
			<param index="1" name="is_ready" type="bool" />
			<description>
				Signal generated after a peer is ready.
			</description>
		</signal>
		<signal name="peer_reconnected">
			<param index="0" name="peer" type="LobbyPeer" />
			<description>
				Signal generated after a peer reconnects.
			</description>
		</signal>
		<signal name="received_lobby_data">
			<param index="0" name="data" type="Object" />
			<param index="1" name="is_private" type="bool" />
			<description>
				Signal generated after data is sent to the lobby.
			</description>
		</signal>
		<signal name="received_peer_data">
			<param index="0" name="data" type="Object" />
			<param index="1" name="to_peer" type="LobbyPeer" />
			<param index="2" name="is_private" type="bool" />
			<description>
				Signal generated after data is sent to peer.
			</description>
		</signal>
	</signals>
</class>
